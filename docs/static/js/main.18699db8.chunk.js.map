{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","target","getGifs","category","a","q","encodeURI","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"mLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAQP,GAAR,mBAAuBO,OAErCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,4DACP,mCACD,EACRC,EAAIC,UAAUH,GACdI,EAJgB,uDACP,mCADO,cAIkDF,EAJlD,kBAER,GAFQ,SAMHG,MAAMD,GANH,cAMhBE,EANgB,gBAOCA,EAAKC,OAPN,uBAOdC,EAPc,EAOdA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC9B,MAAO,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QAZd,kBAefK,GAfe,4CAAH,sDCcLO,EAZK,SAACL,GAInB,OACE,sBAAKM,UAAU,wDAAf,UACE,qBAAKC,IAAKP,EAAIP,IAAKe,IAAKR,EAAIE,QAC5B,4BAAIF,EAAIE,YCoBCO,EApBC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECNN,SAACA,GAAc,IAAD,EACfd,mBAAS,CAClCsB,KAAM,GACNa,SAAS,IAH+B,mBAClCC,EADkC,KAC3BC,EAD2B,KAgBzC,OATAC,qBAAU,WACTzB,EAAQC,GAAUyB,MAAK,SAAAC,GACtBH,EAAS,CAAEf,KAAMkB,EAAML,SAAS,SAK/B,IAEIC,EDR4BK,CAAa3B,GAAjCc,EAFkB,EAExBN,KAAca,EAFU,EAEVA,QAGtB,OACE,qCACE,6BAAKrB,IACJqB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,8BACE,oBAAIA,UAAU,YAAd,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,eESnBgB,EAvBM,SAACC,GAAW,IAAD,EACM3C,mBAAS,CAAC,cADhB,mBACvB4C,EADuB,KACX7C,EADW,KAS9B,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,6BACG6C,EAAWpB,KAAI,SAACV,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCfxB+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.18699db8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  // -----------\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((c) => [inputValue, ...c]);\r\n      // setCategories((cats) => [inputValue, ...cats]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n  // -----------\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\n// ----------------------------\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n// AddCategory.defaultProps = {\r\n//   setCategories: 0,\r\n// };\r\n","export const getGifs = async (category) => {\r\n\tconst apiKey = \"A8xMXqzieIHmtO3BjGLAtf1daSSDAv8K\";\r\n\tconst limit = 5;\r\n\tconst q = encodeURI(category);\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${q}&limit=${limit}`;\r\n\t// --------------\r\n\tconst resp = await fetch(url);\r\n\tconst { data } = await resp.json();\r\n\tconst gifs = data.map((img) => {\r\n\t\treturn {\r\n\t\t\tid: img.id,\r\n\t\t\ttitle: img.title,\r\n\t\t\turl: img.images?.downsized_medium.url,\r\n\t\t};\r\n\t});\r\n\treturn gifs;\r\n\t// setImages(gifs);\r\n\t// setImages(\r\n\t//   data.map((img) => {\r\n\t//     return {\r\n\t//       id: img.id,\r\n\t//       title: img.title,\r\n\t//       url: img.images?.downsized_medium.url,\r\n\t//     };\r\n\t//   })\r\n\t// );\r\n\t// console.log(q);\r\n};\r\n","// import { useState } from \"react\";\r\n// ========================================\r\nconst GifGridItem = (img) => {\r\n  // const [images, setImages] = useState([]);\r\n  // console.log(img);\r\n  // ----------------------\r\n  return (\r\n    <div className=\"card animate__animated animate__bounce animate__pulse\">\r\n      <img src={img.url} alt={img.title} />\r\n      <p>{img.title}</p>\r\n    </div>\r\n  );\r\n};\r\n// ========================================\r\nexport default GifGridItem;\r\n","// import React, { Component, useState, useEffect, useRef } from 'react';\r\n\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\n// import { useEffect, useState } from \"react\";\r\n// import { getGifs } from \"../helpers/getGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\n// ========================================\r\nconst GifGrid = ({ category }) => {\r\n  // ------------\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  // ----------------------\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n      <div>\r\n        <ol className=\"card-grid\">\r\n          {images.map((img) => (\r\n            <GifGridItem key={img.id} {...img} />\r\n          ))}\r\n        </ol>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n// ========================================\r\nexport default GifGrid;\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\tconst [state, setstate] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true\r\n\t})\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tgetGifs(category).then(imgs => {\r\n\t\t\tsetstate({ data: imgs, loading: false })\r\n\t\t\t// setTimeout(() => {\r\n\t\t\t// }, 2000);\r\n\t\t});\r\n\t\t// .then((imgs) => setImages(imgs));\r\n\t}, []);\r\n\r\n\treturn state; // {data, loading}\r\n}","// import React, { Component, useState, useEffect, useRef } from 'react';\r\n\r\nimport { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\n// ========================================\r\nconst GifExpertApp = (props) => {\r\n  const [categories, setCategories] = useState([\"one punch\"]);\r\n  // ----------------------\r\n\r\n  // const handleAdd = () => {\r\n  //   // setCategories([...categories, \"Hunderxhunter\"]);\r\n  //   setCategories((c) => [...c, \"HunterxHunter\"]);\r\n  // };\r\n  // ----------------------\r\n  return (\r\n    <>\r\n      <h1>GifExpertApp</h1>\r\n      <AddCategory setCategories={setCategories} />\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n// ========================================\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}